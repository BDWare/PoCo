const Promise = require('bluebird');
const Web3 = require('web3');
const fs = require('fs-extra');
const openAsync = Promise.promisify(fs.open);
const writeAsync = Promise.promisify(fs.write);
const readFileAsync = Promise.promisify(fs.readFile);
const writeFileAsync = Promise.promisify(fs.writeFile);

var MSG_SENDER = process.argv[2] || "0x8bd535d49b095ef648cd85ea827867d358872809";
var IEXECHUB_ADDRESS= process.argv[3] || "0xc4e4a08bf4c6fd11028b714038846006e27d7be8";
var CALLBACKPROOF_ADDRESS= process.argv[4] || "0x9d32b7cbfa9d68f04048589e5c9cefda241c6312";
//poa test :
var NODE_TARGET = process.argv[5] || "http://localhost:8545";




web3 = new Web3(new Web3.providers.HttpProvider(NODE_TARGET));

Promise.promisifyAll(web3.eth, {
  suffix: "Promise"
});

async function getContractJson() {
  try {
    var abiFileContent = await readFileAsync("../../deployed/contracts/IexecAPI.json");
    return JSON.parse(abiFileContent);
  } catch (err) {
    console.error(err)
  }
};

async function run() {
  try {
    var contractJson = await getContractJson();
    var iexecAPIContract = new web3.eth.Contract(contractJson.abi);

    console.log(contractJson.abi);
    console.log(contractJson.bytecode);
    console.log("IEXECHUB_ADDRESS");
    console.log(IEXECHUB_ADDRESS);
    console.log("CALLBACKPROOF_ADDRESS");
    console.log(CALLBACKPROOF_ADDRESS);
    console.log("try deploy:");

    var hardcode='0x6060604052341561000f57600080fd5b604051604080610c2883398101604052808051919060200180516000805460a060020a60ff0219600160a060020a03338116600160a060020a0319909316929092171674010000000000000000000000000000000000000000179091559092508391508116151561007f57600080fd5b60018054600160a060020a03928316600160a060020a0319918216179091556002805493909216921691909117905550610b6a806100be6000396000f30060606040526004361061008a5763ffffffff60e060020a6000350416634c0f5342811461008f578063514d7067146100b9578063536e28001461019c57806356af48ca1461022057806379117b2e14610236578063a56620f71461024c578063bbac78a914610262578063c2cc421414610281578063deff41c1146102b0578063e21b9d08146102c3575b600080fd5b341561009a57600080fd5b6100a56004356102d6565b604051901515815260200160405180910390f35b34156100c457600080fd5b6100a560048035600160a060020a03169060446024803590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284378201915050505050509190803590602001908201803590602001908080601f01602080910402602001604051908101604052818152929190602084018383808284375094965061042195505050505050565b34156101a757600080fd5b61021e6004803590600160a060020a0360248035821692604435831692606435169160a49060843590810190830135806020601f8201819004810201604051908101604052818152929190602084018383808284375094965050600160a060020a038535811695602001351693506105c992505050565b005b341561022b57600080fd5b6100a560043561071b565b341561024157600080fd5b6100a56004356107f9565b341561025757600080fd5b6100a56004356108eb565b341561026d57600080fd5b61021e600160a060020a0360043516610a23565b341561028c57600080fd5b610294610aff565b604051600160a060020a03909116815260200160405180910390f35b34156102bb57600080fd5b610294610b0e565b34156102ce57600080fd5b6100a5610b1d565b60008054819033600160a060020a039081169116146102f457600080fd5b600154600160a060020a031663b017c0366040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561033357600080fd5b5af1151561034057600080fd5b5050506040518051600154909250600160a060020a03808416925063095ea7b391168560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156103a657600080fd5b5af115156103b357600080fd5b5050506040518051905015156103c857600080fd5b6001547f5e9a23944fb3d019925ad84f8e1696436c1c7229787674a8ef8e08c776050df590600160a060020a031684604051600160a060020a03909216825260208201526040908101905180910390a150600192915050565b60025460009033600160a060020a0390811691161461043f57600080fd5b7f708463eccdafadafbe7022c0f4909af2e585cd08c63eaefa786159e156227e3785858585604051600160a060020a03851681526080602082018181529060408301906060840190840187818151815260200191508051906020019080838360005b838110156104b95780820151838201526020016104a1565b50505050905090810190601f1680156104e65780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b8381101561051c578082015183820152602001610504565b50505050905090810190601f1680156105495780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561057f578082015183820152602001610567565b50505050905090810190601f1680156105ac5780820380516001836020036101000a031916815260200191505b5097505050505050505060405180910390a1506001949350505050565b600154600090600160a060020a031663536e28008989898989898960405160e060020a63ffffffff8a1602815260048101888152600160a060020a0380891660248401528781166044840152868116606484015284811660a4840152831660c483015260e060848301908152909160e40185818151815260200191508051906020019080838360005b8381101561066a578082015183820152602001610652565b50505050905090810190601f1680156106975780820380516001836020036101000a031916815260200191505b5098505050505050505050602060405180830381600087803b15156106bb57600080fd5b5af115156106c857600080fd5b5050506040518051905090507f97bc1c5737260b338426a9a41398356e2567bfb662ff28845fb5cb3e6cdfee9181604051600160a060020a03909116815260200160405180910390a15050505050505050565b6000805433600160a060020a0390811691161461073757600080fd5b600154600160a060020a031663b6b55f258360405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561077f57600080fd5b5af1151561078c57600080fd5b5050506040518051905015156107a157600080fd5b6001547fbaa053b1e17bc83190da4939238743339cd734d83d7413a6d3c117df790dd1a590600160a060020a031683604051600160a060020a03909216825260208201526040908101905180910390a1506001919050565b6000805433600160a060020a0390811691161461081557600080fd5b600154600160a060020a0316632e1a7d4d8360405160e060020a63ffffffff84160281526004810191909152602401602060405180830381600087803b151561085d57600080fd5b5af1151561086a57600080fd5b50505060405180519050151561087f57600080fd5b610888826108eb565b151561089357600080fd5b6001547f2114edfbc766dd13ecebe139c59b657991c87b94518361feb5db86f05b0570f190600160a060020a031683604051600160a060020a03909216825260208201526040908101905180910390a1506001919050565b60008054819033600160a060020a0390811691161461090957600080fd5b600154600160a060020a031663b017c0366040518163ffffffff1660e060020a028152600401602060405180830381600087803b151561094857600080fd5b5af1151561095557600080fd5b5050506040518051915050600160a060020a03811663a9059cbb338560405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b15156109b457600080fd5b5af115156109c157600080fd5b5050506040518051905015156109d657600080fd5b7f3cab9babe8fba8f5cfad7cac37057781ced585f6af63c4e64aedbb12a5c96d993384604051600160a060020a03909216825260208201526040908101905180910390a150600192915050565b60005433600160a060020a03908116911614610a3e57600080fd5b60005474010000000000000000000000000000000000000000900460ff161515610a6757600080fd5b600160a060020a0381161515610a7c57600080fd5b600054600160a060020a0380831691167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911774ff000000000000000000000000000000000000000019169055565b600254600160a060020a031681565b600054600160a060020a031681565b60005474010000000000000000000000000000000000000000900460ff16815600a165627a7a723058203c5f00edf167da00906749313aaa54bb10b6fb41b4d3297b9bb90c7027adf5c70029'

    web3.eth.getTransactionCountPromise(MSG_SENDER).timeout(2000).then(function(currentNonce) {
      console.log("MSG_SENDER [" + MSG_SENDER + "] nonce is [" + currentNonce + "]");
      try {

            iexecAPIContract.deploy({
                data: hardcode,
                //data: contractJson.bytecode,
                arguments: ['0xc4e4a08bf4c6fd11028b714038846006e27d7be8', '0x9d32b7cbfa9d68f04048589e5c9cefda241c6312'],
                nonce: currentNonce
            })
            .send({
                from: MSG_SENDER,
                gas: '4710000',
                gasPrice: '22000000000'
            }, function(error, transactionHash){ console.log("error transactionHash") ; console.log(error) ; console.log(transactionHash) })
            .on('error', function(error){ console.log("error") ; console.log(error) })
            .on('transactionHash', function(transactionHash){   console.log("transactionHash");  console.log(transactionHash) })
            .on('receipt', function(receipt){
               console.log(receipt.contractAddress) // contains the new contract address
            })
            .on('confirmation', function(confirmationNumber, receipt){  console.log("confirmation");  console.log(confirmation) })
            .then(function(newContractInstance){
                console.log(newContractInstance.options.address) // instance with the new contract address
            });


      } catch (err) {
        console.error(err);
        process.exit(1);
      }
    });

  } catch (err) {
    console.error(err);
    process.exit(1);
  }
};

run();
