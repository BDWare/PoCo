type Account @entity {
	id:                           ID!
	apps:                         [App!]! @derivedFrom(field: "owner")
	datasets:                     [Dataset!]! @derivedFrom(field: "owner")
	workerpools:                  [Workerpool!]! @derivedFrom(field: "owner")
	events:                       [AccountEvent!]! @derivedFrom(field: "account")
	contributions:                [Contribution!]! @derivedFrom(field: "worker")
	asRequester:                  [Deal!]! @derivedFrom(field: "requester")
	asBeneficiary:                [Deal!]! @derivedFrom(field: "beneficiary")
	asCallback:                   [Deal!]! @derivedFrom(field: "callback")
}

interface Event {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
}

# ================================ Ressources =================================
type App @entity {
	id:                           ID!
	owner:                        Account!
	name:                         String
	type:                         String
	multiaddr:                    Bytes
	checksum:                     String
	mrenclave:                    Bytes
	usages:                       [Deal!]! @derivedFrom(field: "app")
}

type Dataset @entity {
	id:                           ID!
	owner:                        Account!
	name:                         String
	multiaddr:                    Bytes
	checksum:                     String
	usages:                       [Deal!]! @derivedFrom(field: "dataset")
}

type Workerpool @entity {
	id:                           ID!
	owner:                        Account!
	description:                  String
	workerStakeRatio:             BigInt
	schedulerRewardRatio:         BigInt
	usages:                       [Deal!]! @derivedFrom(field: "workerpool")
	events:                       [PolicyUpdate!]! @derivedFrom(field: "workerpool")
}

type PolicyUpdate implements Event @entity {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
	workerpool:                   Workerpool!
	oldWorkerStakeRatio:          BigInt!
	newWorkerStakeRatio:          BigInt!
	oldSchedulerRewardRatio:      BigInt!
	newSchedulerRewardRatio:      BigInt!
}

# =================================== PoCo ====================================
type Category @entity {
	id:                           ID!
	name:                         String
	description:                  String
	workClockTimeRef:             BigInt
}

type Deal @entity {
	id:                           ID!
	tasks:                        [Task!]! @derivedFrom(field: "deal")
	app:                          App!
	appOwner:                     Account!
	appPrice:                     BigInt!
	dataset:                      Dataset!
	datasetOwner:                 Account!
	datasetPrice:                 BigInt!
	workerpool:                   Workerpool!
	workerpoolOwner:              Account!
	workerpoolPrice:              BigInt!
	trust:                        BigInt!
	category:                     Category!
	tag:                          String!
	requester:                    Account!
	beneficiary:                  Account!
	callback:                     Account!
	params:                       String!
	startTime:                    BigInt!
	botFirst:                     BigInt!
	botSize:                      BigInt!
	workerStake:                  BigInt!
	schedulerRewardRatio:         BigInt!
}

enum TaskStatus {
	UNSET
	ACTIVE
	REVEALING
	COMPLETED
	FAILLED
}

type Task @entity {
	id:                           ID!
	status:                       TaskStatus!
	deal:                         Deal!
	index:                        BigInt!
	contributions:                [Contribution!]! @derivedFrom(field: "task")
	consensus:                    String # set on consensus reached
	resultDigest:                 String # set on reveal
	results:                      String # set on finalized
	contributionDeadline:         BigInt!
	revealDeadline:               BigInt # set on consensus reached
	finalDeadline:                BigInt!
	rewards:                      [Reward!]! @derivedFrom(field: "task")
	seizes:                       [Seize!]! @derivedFrom(field: "task")
}

enum ContributionStatus {
	UNSET
	CONTRIBUTED
	PROVED
	REJECTED
}

type Contribution @entity {
	id:                           ID!
	status:                       ContributionStatus!
	task:                         Task!
	worker:                       Account!
	hash:                         String!
	seal:                         String!
	challenge:                    String!
}

# ============================== Token movements ==============================
interface AccountEvent {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
	account:                      Account!
	value:                        BigInt!
}

type Deposit implements AccountEvent @entity {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
	account:                      Account!
	value:                        BigInt!
	from:                         Account!
}

type Withdraw implements AccountEvent @entity {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
	account:                      Account!
	value:                        BigInt!
	to:                           Account!
}

type Reward implements AccountEvent @entity {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
	account:                      Account!
	value:                        BigInt!
	task:                         Task!
}

type Seize implements AccountEvent @entity {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
	account:                      Account!
	value:                        BigInt!
	task:                         Task!
}

type Lock implements AccountEvent @entity {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
	account:                      Account!
	value:                        BigInt!
}

type Unlock implements AccountEvent @entity {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
	account:                      Account!
	value:                        BigInt!
}
