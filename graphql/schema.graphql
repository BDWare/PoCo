type Account @entity {
	id:                           ID!
}

interface Event {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
}

# ================================ Ressources =================================
type App @entity {
	id:                           ID!
	owner:                        Account!
	name:                         String
	type:                         String
	multiaddr:                    Bytes
	checksum:                     String
	mrenclave:                    Bytes
}

type Dataset @entity {
	id:                           ID!
	owner:                        Account!
	name:                         String
	multiaddr:                    Bytes
	checksum:                     String
}

type Workerpool @entity {
	id:                           ID!
	owner:                        Account!
	description:                  String
	workerStakeRatio:             BigInt
	schedulerRewardRatio:         BigInt
}

type PolicyUpdate implements Event @entity {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
	workerpool:                   Workerpool!
	oldWorkerStakeRatio:          BigInt!
	newWorkerStakeRatio:          BigInt!
	oldSchedulerRewardRatio:      BigInt!
	newSchedulerRewardRatio:      BigInt!
}

# =================================== PoCo ====================================
type Category @entity {
	id:                           ID!
	name:                         String
	description:                  String
	workClockTimeRef:             BigInt
}

type Deal @entity {
	id:                           ID!
	tasks:                        [Task!]!
	app:                          App
	appOwner:                     Account
	appPrice:                     BigInt
	dataset:                      Dataset
	datasetOwner:                 Account
	datasetPrice:                 BigInt
	workerpool:                   Workerpool
	workerpoolOwner:              Account
	workerpoolPrice:              BigInt
	trust:                        BigInt
	category:                     Category
	tag:                          String
	requester:                    Account
	beneficiary:                  Account
	callback:                     String
	params:                       String
	startTime:                    BigInt
	botFirst:                     BigInt
	botSize:                      BigInt
	workerStake:                  BigInt
	schedulerRewardRatio:         BigInt
}

enum TaskStatus {
	UNSET
	ACTIVE
	REVEALING
	COMPLETED
	FAILLED
}

type Task @entity {
	id:                           ID!
	status:                       TaskStatus!
	deal:                         Deal!
	index:                        BigInt
	contributions:                [Contribution!]!
	resultDigest:                 String
	results:                      String
	contributionDeadline:         BigInt
	revealDeadline:               BigInt
	finalDeadline:                BigInt
	consensusValue:               String
}

enum ContributionStatus {
	UNSET
	CONTRIBUTED
	PROVED
	REJECTED
}

type Contribution @entity {
	id:                           ID!
	status:                       ContributionStatus
	worker:                       Account
	hash:                         String
	seal:                         String
	challenge:                    String
}

# ============================== Token movements ==============================
interface AccountEvent {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
	account:                      Account!
	value:                        BigInt!
}

type Deposit implements AccountEvent @entity {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
	account:                      Account!
	value:                        BigInt!
	from:                         Account!
}

type Withdraw implements AccountEvent @entity {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
	account:                      Account!
	value:                        BigInt!
	to:                           Account!
}

type Reward implements AccountEvent @entity {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
	account:                      Account!
	value:                        BigInt!
	task:                         Task!
}

type Seize implements AccountEvent @entity {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
	account:                      Account!
	value:                        BigInt!
	task:                         Task!
}

type Lock implements AccountEvent @entity {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
	account:                      Account!
	value:                        BigInt!
}

type Unlock implements AccountEvent @entity {
	id:                           ID!
	blockNumber:                  Int!
	transactionID:                Bytes!
	account:                      Account!
	value:                        BigInt!
}
